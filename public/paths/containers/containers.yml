get:
  operationId: "getContainers"
  tags:
    - Containers
  summary: List Containers
  description: Requires the `containers-view` capability.
  parameters:
    - name: meta
      in: query
      required: false
      description:
        A comma separated list of meta values. Meta values will show up under a resource's
        `meta` field. In the case of applying a meta to a collection of resources, each
        resource will have it's own relevant meta data. In some rare cases, meta may not
        apply to individual resources, and may appear in the root document. These will be
        clearly labeled.
      schema:
        type: array
        items:
          type: string
          enum:
            - instances_count
            - domain
            - domains
            - ips
    - name: include
      in: query
      required: false
      description:
        A comma separated list of include values. Included resources will show
        up under the root document's `include` field, with the key being the id of the included
        resource. In the case of applying an include to a collection of resources, if two
        resources share the same include, it will only appear once in the return.
      schema:
        type: array
        items:
          type: string
          enum:
            - creators
            - images
            - stack_builds
            - stacks
            - environments
    - name: filter
      in: query
      required: false
      description: |
        ## Filter Field
        The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.

        ## Possible Values
        ### Search
        `filter[search]=value` search containers for a value associated with a field on the given container(s).

        ### State
        `filter[state]=value1,value2` state filtering will allow you to filter by the container's current state.

        ### Service
        `filter[service]=value` service filtering will allow you to filter by service type: `loadbalancer`, `discovery`, `vpn`.

        ### Public Network
        `filter[public_network]=value` public network filtering will allow you to filter by the containers network settings: `enabled`, `disabled`, `egress-only`.

        ### Image 
        `filter[image]=ID` image filtering by ID.  Submit the ID of the image you wish to filter for and the return will be any containers currently using the image.

        ### Environment
        `filter[environment]=ID` environment filtering by ID.  Submit the ID of the environment you wish to filter for and the return will be any containers in that environment.

        ### Tags
        `filter[tags]=tagone,tagtwo,tagthree` container filtering using server tags. If the container has the tags you submit it will be part of the return. 

        ### Stacks
        `filter[stack]=ID` stack filtering by ID.  Submit the ID of the stack you wish to filter for and the return will be any containers deployed associated with 'containers' from the stack.

      schema:
        type: object
        additionalProperties:
          type: string
          oneOf:
            - type: string
            - type: array
              items:
                type: string
            - type: object
              additionalProperties:
                type: string
      style: deepObject

    - $ref: ../../../components/parameters/SortParam.yml
    - $ref: ../../../components/parameters/PageParam.yml
  responses:
    200:
      description: Returns a collection of container resources.
      content:
        application/json:
          schema:
            title: "ListContainersResponse"
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: ../../../components/schemas/containers/Container.yml
              includes:
                $ref: ../../../components/schemas/containers/ContainerIncludes.yml
    400:
      $ref: ../../../components/responses/errors/400.yml
    401:
      $ref: ../../../components/responses/errors/401.yml
    403:
      $ref: ../../../components/responses/errors/403.yml
    404:
      $ref: ../../../components/responses/errors/404.yml
    409:
      $ref: ../../../components/responses/errors/409.yml
    415:
      $ref: ../../../components/responses/errors/415.yml
    422:
      $ref: ../../../components/responses/errors/422.yml
    500:
      $ref: ../../../components/responses/errors/500.yml
    503:
      $ref: ../../../components/responses/errors/503.yml
post:
  operationId: "createContainer"
  tags:
    - Containers
  parameters: []
  summary: Create Container
  description: Requires the `containers-deploy` capability.
  requestBody:
    description: Parameters for creating a new container.
    content:
      application/json:
        schema:
          type: object
          required:
            - name
            - environment_id
            - image_id
            - stateful
            - config
          properties:
            name:
              type: string
              description: A user defined name for the container.
            environment_id:
              type: string
              description: An identifier for the environment this container will be deployed to.
            image_id:
              type: string
              description: An identifier for the image used to create this container.
            stateful:
              type: boolean
              description: A boolean where true represents this container is stateful.
            config:
              "$ref": "../../../components/schemas/containers/config/Config.yml"
            volumes:
              type: array
              items:
                $ref: ../../../components/schemas/containers/config/Volumes.yml
            annotations:
              type: object
              description: User defined meta data for the container.
              additionalProperties:
                type: string

  responses:
    201:
      description: Returns a container resource.
      content:
        application/json:
          schema:
            title: "ContainerResponse"
            type: object
            properties:
              data:
                $ref: ../../../components/schemas/containers/Container.yml
    400:
      $ref: ../../../components/responses/errors/400.yml
    401:
      $ref: ../../../components/responses/errors/401.yml
    403:
      $ref: ../../../components/responses/errors/403.yml
    404:
      $ref: ../../../components/responses/errors/404.yml
    409:
      $ref: ../../../components/responses/errors/409.yml
    415:
      $ref: ../../../components/responses/errors/415.yml
    422:
      $ref: ../../../components/responses/errors/422.yml
    500:
      $ref: ../../../components/responses/errors/500.yml
    503:
      $ref: ../../../components/responses/errors/503.yml
