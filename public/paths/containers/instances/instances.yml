get:
  operationId: "getInstances"
  tags:
    - Instances
  parameters:
    - name: containerId
      description: The ID of the container this instance is created from.
      in: path
      required: true
      schema:
        type: string
    - name: include
      in: query
      required: false
      explode: false
      description:
        A comma separated list of include values. Included resources will show
        up under the root document's `include` field, with the key being the id of the included
        resource. In the case of applying an include to a collection of resources, if two
        resources share the same include, it will only appear once in the return.
      schema:
        type: array
        items:
          type: string
          enum:
            - creators
            - servers
            - locations
            - providers
            - containers
            - environments
    - name: filter
      in: query
      required:
        false
        # Deep nested arrays are undefined https://github.com/OAI/OpenAPI-Specification/issues/1706
      style: deepObject
      description: |
        ## Filter Field 
        The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
      schema:
        type: object
        properties:
          state:
            type: string
            description: |
              `filter[state]=value1,value2` state filtering will allow you to filter by the instance's current state.
          search:
            type: string
            description: |
              `filter[search]=value` search instances for a value associated with a field on the given instance(s).
          server:
            type: string
            description: |
              `filter[server]=ID` server filtering by ID. Submit the ID of the server you wish to filter for and the return will be any instances of the container currently deployed to the given server.
          range-start:
            description: The start date from when to pull the instances
            $ref: ../../../../components/schemas/DateTime.yml
          range-end:
            description: The end date from when to pull the instances
            $ref: ../../../../components/schemas/DateTime.yml
    - $ref: ../../../../components/parameters/SortParam.yml
    - $ref: ../../../../components/parameters/PageParam.yml
  summary: List Instances
  description: Requires the `containers-view` capability.
  responses:
    200:
      description: Returns a collection of contianer instance resources.
      content:
        application/json:
          schema:
            title: ContainerInstanceListResponse
            type: object
            required: 
              - data
            properties:
              data:
                type: array
                items:
                  $ref: ../../../../components/schemas/containers/instances/Instance.yml
              includes:
                $ref: ../../../../components/schemas/containers/instances/InstanceIncludes.yml
    default:
      $ref: ../../../../components/responses/errors/DefaultError.yml
post:
  operationId: "createContainerInstance"
  tags:
    - Containers
  parameters:
    - name: containerId
      description: The ID of the container this instance is created from.
      in: path
      required: true
      schema:
        type: string
  summary: Create Instance(s)
  description: Requires the `containers-update` capability.
  requestBody:
    description: Parameters for creating a container instance.
    content:
      application/json:
        schema:
          type: array
          items:
            type: object
            required:
              - server_id
              - new_instances
            properties:
              server_id:
                type: string
                description: The ID of the server the new instance(s) should be deployed to.
              new_instances:
                type: integer
                description: The number of new instances to be created on the given server.

  responses:
    202:
      description: Returns a task descriptor.
      content:
        application/json:
          schema:
            type: object
            required: 
              - data
            properties:
              data:
                $ref: ../../../../components/schemas/jobs/TaskDescriptor.yml
    default:
      $ref: ../../../../components/responses/errors/DefaultError.yml
delete:
  operationId: "removeMultipleContainerInstances"
  tags:
    - Instances
  parameters:
    - name: containerId
      description: The ID of the container the instance(s) were created from.
      in: path
      required: true
      schema:
        type: string
  summary: Delete Instance(s)
  description: Requires the `containers-update` capability.
  responses:
    200:
      description: Returns a task descriptor.
      content:
        application/json:
          schema:
            type: object
            required: 
              - data
            properties:
              data:
                $ref: ../../../../components/schemas/jobs/TaskDescriptor.yml
    default:
      $ref: ../../../../components/responses/errors/DefaultError.yml
